[
  {
    "start": "00:00:07.550000",
    "end": "00:00:12.870000",
    "text": "in this example the notebook is quite instructive because it refers to a small data set and i think working with small data sets are actually handy in the beginning"
  },
  {
    "start": "00:00:15.190000",
    "end": "00:00:39.430000",
    "text": "when you are trying to understand what is going on here we have the classic case of dogs versus cats we have also the simplest possible task in machine learning which is classification image classification in this case and we are going to be using convolutional layers in order for detect no no sorry to detect to classify the presence of a dog orry to detect to classify the presence of a dog or a cat on in in an image okay or cats"
  },
  {
    "start": "00:00:46.869000",
    "end": "00:00:46.869000",
    "text": "in this case all right so the data set is available in kagle"
  },
  {
    "start": "00:00:49.189000",
    "end": "00:01:09.990000",
    "text": "the original data set contained 25000 images but we have cut down to 1000 images per class and we have  split the data set into train and validation and test data set okay all right"
  },
  {
    "start": "00:01:11.990000",
    "end": "00:01:14.350000",
    "text": "so we are going to obviously use train and validation to create if you like our model and of course we are going to exercise some kind de prediction api using our test data set af"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "to classifykind of prediction api"
  },
  {
    "start": "00:01:20.510000",
    "end": "00:01:30.030000",
    "text": "using our test data set after a model is created so the architecture were going to be using here is an architecture that we have kindof developed specifically for this example"
  },
  {
    "start": "00:01:33.910000",
    "end": "00:01:42.230000",
    "text": "is consist evidently of convolutional andor interleaded with max pulling layers and probably you recognize the api here in this case is a kind of a caras api"
  },
  {
    "start": "00:01:45.630000",
    "end": "00:01:57.109000",
    "text": "similar architectures can be develop for python the first layer over here is py the there is input images of 150 by 150 pixels re is input images of 150 by 150 pixels"
  },
  {
    "start": "00:02:00.029000",
    "end": "00:02:08.869000",
    "text": "this is what the imag that we have transformed now are and each image is a naturally colored image of three channels red green and blue"
  },
  {
    "start": "00:02:14.190000",
    "end": "00:02:22.150000",
    "text": "we have u 3x3 kernels and we have the 32 here indicates the number of filters okay or convolutional neurons and we are going to be using a rectified linear unit"
  },
  {
    "start": "00:02:24.750000",
    "end": "00:02:34.990000",
    "text": "they exactly the same nonlinearity that they have used in the fully connected layers then we are passing the output feature map produced here and by the way this is where you ca"
  },
  {
    "start": "00:02:37.430000",
    "end": "00:02:44.110000",
    "text": "produced here and by the way this is where you can actually see the usage of that kindof formula which i was pointing out regarding the output feature map dimensions in an earlier video"
  },
  {
    "start": "00:02:47.350000",
    "end": "00:03:00.869000",
    "text": "the max pooling layer in this case is 2x two and it will further shrink the output feat m produced by the first layer selecting the most important features out of it passing it over to a convolutional layer with 64 filters"
  },
  {
    "start": "00:03:04.390000",
    "end": "00:03:08.309000",
    "text": "here you see now the pattern of increasing the number of filters as the network becomes deeperhe number of filters"
  },
  {
    "start": "00:03:11.830000",
    "end": "00:03:19.350000",
    "text": "as the network becomes deeper and deeper and at some point after one two three four layers four convolutional layers we are going to have the head"
  },
  {
    "start": "00:03:25.229000",
    "end": "00:03:33.990000",
    "text": "and i think its worthwhile going back into this vgg kind of architecture and look exactly where that head was in that architecture and and couple it with with this code"
  },
  {
    "start": "00:03:36.589000",
    "end": "00:03:43.589000",
    "text": "so here is the point where the head starts and the head in this case is a concatenation of fully connected layers"
  },
  {
    "start": "00:03:47.949000",
    "end": "00:03:47.949000",
    "text": "why we have this kind de concatenation and want do justhave this kind of concatenation and want do just a single layer is you know gradually"
  },
  {
    "start": "00:03:50.070000",
    "end": "00:03:59.949000",
    "text": "even within the head we need to gradually reach this point of desired number of classes we have a classification use case here this is"
  },
  {
    "start": "00:04:08.670000",
    "end": "00:04:13.429000",
    "text": "a thousand classes that are needto be present in at the top of the atthe end of the of this u network and this is basically the dimensionality of our posterior probability distribution"
  },
  {
    "start": "00:04:15.630000",
    "end": "00:04:19.030000",
    "text": "were going to have the ayhat if you like that consist from a thousand numbers if you like that they are also theist of a thousand numbers"
  },
  {
    "start": "00:04:21.390000",
    "end": "00:04:33.749000",
    "text": "a thousand are also the are the number of classes in the image net data set so this this dimensions correspond to the image net classifier data set and so thats basically our head"
  },
  {
    "start": "00:04:37.150000",
    "end": "00:04:46.110000",
    "text": "there is also seen over here in this code with this portion of the model so we have whatever we have produced in terms of convolutions over here and then we flatten the network so we flatten"
  },
  {
    "start": "00:04:51.990000",
    "end": "00:04:56.710000",
    "text": "oh sorry flatten the output feature map there by flattening the output f map we are creating effectivelyoutput f map we are creating effectively a volume"
  },
  {
    "start": "00:04:58.270000",
    "end": "00:05:09.510000",
    "text": "were taking a volume at the input and were flattening into vector vor and this vector then is passed as input to two dense layers the first dense layer is has 512 neurons"
  },
  {
    "start": "00:05:30.309000",
    "end": "00:05:30.309000",
    "text": "it takes whatever dimensionality and well see now the dimensions in  a moment"
  },
  {
    "start": "00:07:22.990000",
    "end": "00:07:22.990000",
    "text": "the flatten layer provided and reduces that just like any fully connected layer we have seen in  or otherwise connected layer"
  },
  {
    "start": "00:11:41.110000",
    "end": "00:11:41.110000",
    "text": "we have seen in tensions and we use the rectified linear unit for that and then with the subsequent layer takes 512 dimensions and reduces it further into gas into a single dimension"
  },
  {
    "start": "00:13:00.470000",
    "end": "00:13:00.470000",
    "text": "because as we have seen in the binary classification we have a binary classification use case here either were going to have  a cats or dogs"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "we have just — – scaler that we need because that is the probability of the positive glass"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "whatever that positive classes probably the dogs here and we are of course going on be using sized since only atf course going to be using sigmoid because only at the output of the sigmoid is actually getting this form of the posterior probability as we had discussed in the fully connected layers and in that lecture all right"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "so this is basically our architecture very simple architecture the convolution portions the flatten and the fully connected or dense portion to provide the binary classification result at the output"
  },
  {
    "start": "00:13:18.509000",
    "end": "00:13:18.509000",
    "text": "and here is the u details of our cnn so we can see the input images that are actuacnn so we can see the input images that are actually we coming in"
  },
  {
    "start": "00:13:24.990000",
    "end": "00:13:24.990000",
    "text": "the first we have 32 filters as we discussed in terms of number of parameters 896 1800073000 147000 so all of these are parameters that you see being quoted herein the next to the convolutional layers"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "but the most striking thing over here is this look at the number of parameters which are involved in the fully connected in one fully connected or dense layer 332 million parameters so out of the total 3 and a2 million parameters that we haf the total 3 and a2 million parameters that we have 32 million are associated with a fully connected layer and here is the kind of striking example of why it would make sense to actually use cnn for image classification if we didnt have the cnn and the associated advantage of that cnn provide which was actually also shown in this kindof snapshot architecture"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "as you can see only the locpixels the one which are which are local to the special dimensions of the filter are socalled firing in order toof the filter are socalled firing in order to produce that kind of scaler"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "okay as compared to a fully connected architecture where everything that we have here is going to be connected to the layer to to form"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "if you like the output scaler z the convolutions are operation is actually helping us to significantly reduce the number of parameters"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "so at the end of the day we have u u the scalar that indicates the posterior probability of the positive class as we discussed and then the architecture is seemingas we discussed and then the architecture is seems to be valid"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "we are going to evidently going to use binary cross entropy just like what we have done earlier in that other video where we looked at dense layers only for binary classification or multiclass classification and we are going to have here"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "well here the author selected the rms prop which is one of the cousins of stochastic gr descent"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "we havent really got any discussion specifically on enhancements of stochastic gr descent but if you do replace is of stochastic gr descent but if you do replace it with sgd i think you will be getting very similar performance with the corresponding learning parameter and then"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "of course the metric is our accuracy"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "and one of the things that we would like to point out in u in this kindof convolution and networks is that we will need must do to be careful when we first take a data set"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "and we try to process the images as we have seen the images are typically given to us as with pixels corresponds to integer numbers"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "so we hwith pixels corresponds to integer numbers so we have to definitely normalize them we have to b them"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "we have a lot of this kindtransformations in order for us to produce the right inputs for the for for our network"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "so after a training process that involves multiple epochs as would expect we have  and we can actually plot the training and validation loss as well also the corresponding kind of accuracy"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "and look at the corresp responding loss over here plot as the number of epokes and r loss over here"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "plot as the number of epochs and remember what we have said in at the another video regarding the condition of overfitting and at that time the discussion was an example of a linear model on the regression task"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "over here we have a classification task but the sort of problem of overfitting is present in across tasks in inin machine learning"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "so we see some quite significant difference between training and validation as the accuracy is improving and that is really what we have said earlie"
  },
  {
    "start": "00:13:48.310000",
    "end": "00:13:48.310000",
    "text": "roving and that is really what we have said earlier as an a good indicator of overfitting"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "okay so it seems that the network that we have designed over here overfits the data set we are given and it shouldnt be"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "a complete surprise to us given the fact that we are throwing  a significant number of parameters in in  in  in               th000 labels per class and so we can actually engage any of the techniques that we have seen in overfitting suchto address overfitting such as weight decay any of the regularization techniques that we have seen also in neuron networks to addresses it"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "but in computer vision we have something else that could actually help us and this is actually called the documentation"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "so i think its worthwhile going through the data augmentation because it is really a fairly straightforward and widely used approach to avoid the situation such like this where we have overfeeding"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "so in that augmentation what we actually do we are taki that augmentation"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "what we actually do is we are taking the input images and given the fact that we have the knowledge of the class we try to transform these input images in creating more data"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "so thats the an artificial way of increasing the number of labels we have in our data set we we have various kindof transformations we may be shifting rotating images we may sharing the image we have"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "we are zooming in zooming out and flipping and so on"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "we are definitely going to be creating some nasty cats or dogs butgoing to be creating some nasty cats or dogs but definitely this helps our network to not overfit and so if you are to just keep the exactly same network chitecture as we have seen earlier not not touch at all"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "the model but definitely train the model with this additional kind of data set then look what happened"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "we have a training and validation loss which are very close to each other so we actually have solved the overfeeding problem and our accuracy is both in terms of training and validation are alsoboth in terms of training and validation are also very close and close to some something like 85"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "okay so i think this is a good example to showcase the u cnn models as  working for the simple task of image classification"
  },
  {
    "start": "-1:59:59.000000",
    "end": "-1:59:59.000000",
    "text": "and what we actually would like to understand now next is what we have said earlier about hey what"
  },
  {
    "start": "00:13:51.590000",
    "end": "00:14:03.920000",
    "text": "how can we have some kind de visualization into the internals of the cnn to understand what is what is actually learning and that is what we will be discussing next"
  }
]